// Правила именования
// Правило 1.
//
// Никакого транслита. Только английский.
//
// Неприемлемы:

var moiTovari;
var cena;
var ssilka;
// Подойдут:

var myGoods;
var price;
var link;
//
// Во-первых, среди разработчиков всего мира принято использовать английский язык для имён переменных. И если ваш код потом попадёт к кому-то другому, например вы будете в команде больше чем из одного человека, то велик шанс, что транслит ему не понравится.
//
// Во-вторых, русский транслит хуже читается и длиннее, чем названия на английском.
//
// В-третьих, в проектах вы наверняка будете применять библиотеки, написанные другими людьми. Многое уже готово, в распоряжении современного разработчика есть масса инструментов, все они используют названия переменных и функций на английском языке, и вы, конечно, будете их использовать. А от кода, где транслит перемешан с английским – волосы могут встать дыбом, и не только на голове.

// Правило 2.
//
// Использовать короткие имена только для переменных «местного значения».
//
// Называть переменные именами, не несущими смысловой нагрузки, например a, e, p, mg – можно только в том случае, если они используются в небольшом фрагменте кода и их применение очевидно.
//
// Вообще же, название переменной должно быть понятным. Иногда для этого нужно использовать несколько слов.


// Правило 3.
//
// Переменные из нескольких слов пишутся вместеВотТак.
//
// Например:

var borderLeftWidth;
// Этот способ записи называется «верблюжьей нотацией» или, по-английски, «camelCase».

// Существует альтернативный стандарт, когда несколько слов пишутся через знак подчеркивания '_':

var border_left_width;
// Преимущественно в JavaScript используется вариант borderLeftWidth, в частности во встроенных языковых и браузерных функциях. Поэтому целесообразно остановиться на нём.
//
// Ещё одна причина выбрать «верблюжью нотацию» – запись в ней немного короче, чем с подчеркиванием, т.к. не нужно вставлять '_'.


// Правило последнее, главное.
//
// Имя переменной должно максимально чётко соответствовать хранимым в ней данным.
//
// Придумывание таких имен – одновременно коротких и точных, при которых всегда понятно, что где лежит, приходит с опытом, но только если сознательно стремиться к этому.
//
// Позвольте поделиться одним небольшим секретом, который очень прост, но позволит улучшить названия переменных и сэкономит время.
//
// Бывает так, что, написав код, мы через некоторое время к нему возвращаемся, надо что-то поправить. И мы примерно помним, что переменная, в которой хранится нужное вам значение, называется… Ну, скажем, borderLeftWidth. Мы ищем её в коде, не находим, но, разобравшись, обнаруживаем, что на самом деле переменная называлась вот так: leftBorderWidth.
//
// Если мы ищем переменную с одним именем, а находим – с другим, то зачастую самый лучший ход – это переименовать переменную, чтобы имя было тем, которое вы искали.
//
// То есть, в коде leftBorderWidth, а мы её переименуем на ту, которую искали: borderLeftWidth.
//
// Зачем? Дело в том, что в следующий раз, когда вы захотите что-то поправить, то вы будете искать по тому же самому имени. Соответственно, это сэкономит вам время.
//
// Есть причина и поважнее. Поскольку именно это имя переменной пришло в голову – скорее всего, оно больше соответствует хранимым там данным, чем то, которое было мы придумали изначально. Исключения бывают, но в любом случае – такое несовпадение – это повод задуматься.
//
// Чтобы удобно переименовывать переменную, нужно использовать хороший редактор JavaScript, тогда этот процесс будет очень простым и быстрым.
